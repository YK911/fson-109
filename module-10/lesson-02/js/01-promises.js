/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –ø—Ä–æ–º—ñ—Å—É
 * - –ö–ª–∞—Å Promise
 * - resolve
 * - reject
 * - then, catch, finally
 */

// "–ü—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω–∞–≤—Å—è —É—Å–ø—ñ—à–Ω–æ, —ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–≤–∏–∫–æ–Ω–∞–Ω–∏–π, fulfilled)";
// "–ü—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω–∞–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é (–≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π, rejected)"
// function executor(resolve, reject) {
//   resolve('–ü—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω–∞–≤—Å—è ‚úÖ');
// }

// const promise1 = new Promise(executor);
// console.log('promise1:', promise1);

let loading = 'Loading...';

const promise = new Promise((resolve, reject) => {
  const isSuccess = Math.random() > 0.5;
  console.log('isSuccess:', isSuccess);
  console.log(loading);

  setTimeout(() => {
    if (isSuccess) {
      resolve('–ü—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω–∞–≤—Å—è —É—Å–ø—ñ—à–Ω–æ');
    }
    reject('–ü—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω–∞–≤—Å—è  –∑ –ø–æ–º–∏–ª–∫–æ—é');
  }, 2000);
});
console.log(promise);

promise
  .then(onSuccessOne)
  .then(onSuccessTwo)
  .catch(onError)
  .finally(() => {
    console.log('Finished loading üéâ');
  });

function onSuccessOne(params) {
  console.log(params);
  return 10;
}
function onSuccessTwo(str) {
  console.log(str);
  return 'String';
}

function onError(error) {
  console.log(error);
}

// const promise3 = new Promise(function (resolve, reject) {
//   reject({ error: '–ü—Ä–æ–º—ñ—Å –≤–∏–∫–æ–Ω–∞–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é', status: 'failed' });
// });
// console.log('promise3:', promise3);

/**
 * –õ–∞–Ω—Ü—é–∂–∫–∏ –ø—Ä–æ–º—ñ—Å—ñ–≤
 * - –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö then
 * - then –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º—ñ—Å
 */
